# sudo su -

Install Terraform:

# wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
# echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
# sudo apt-get update 
# sudo apt-get install terraform -y
# terraform --version

Launch the AWS lab
===========================================
Create a new user in IAM and Create Access key and secret key


Create user and credentials in AWS:
============================

We need create an new user in AWS whose credentials will be provided to terraform -- IAM service on AWS will be used

In AWS 

IAM > Users > click on add user

 > give a username
 > click next >
 select Attach policies directly > select AdministratorAccess below >>

 click on next >

click on create user.

Now lets attach access key and secret key to the user.

Click on user name>>

 click on security credentials

 > Scroll down → Select Access keys> click on create access key
 > select Command Line Interface (CLI)

> scroll down → click on I understand the above recommendation and want to proceed to create an access key. > press next > click on create access key

Configure AWS for accesskey and secret key
=============================================
# apt-get install awscli -y

# aws configure

Give the valid access key

Give the valid secret key

Press enter, no need to give any region and format option

You can check it by below commands

# cd

# ls -al

# cd .aws

# cat credentials



================================================

# mkdir myterraformfiles
# cd myterraformfiles

# vim aws_infra.tf

provider "aws" {
  region = "us-east-1"
  shared_credentials_files = ["~/.aws/credentials"]
}

Save the file

# terraform init

================================
Terraform code is always written in the form of a block

provider block
resource block
data block
variable block
local block
dynamic block
provisioner block
connection block

a block is represented with 
{
    // terraform code
}
every block will have a unique name given by the user



Data Block:
=================
data block in Terraform will not create anything on AWS

Rather, it is like a filter that will search specific data on AWS and fetch the data on the Terraform machine.

We will use this data block in our code to search for desired ami id and pass it on to the resource block


=======================

Data block to filter and get ami id
================================

Add the data block in the aws_infra.tf file as show below.
Do not repeat the provider block.

# vim aws_infra.tf

provider "aws" {
  region = "us-east-1"
  shared_credentials_files = ["~/.aws/credentials"]
}

data "aws_ami" "myami" {

most_recent      = true
owners           = ["amazon"]
filter {
    name   = "name"
    values = ["amzn2-ami-hvm*"]
}

}

Save the file

exeucte the file

# terraform apply

# ls

you will see terraform.tfstate file

# cat terraform.tfstate
you will see the dteials of the ami fetched.

=========================================
Add the resource block that will use ami id form the data block:

 # vim aws_infra.tf

resource "aws_instance" "myec2" {
  ami           = data.aws_ami.myami.id
  instance_type = "t2.micro"

  tags = {
    Name = "instance1"
  }
}

save the file

# terraform apply

give yes for approval

check the instance in AWS

# terraform destroy

===================================================
Variables in terraform:
==============================================

# vim variables.tf

variable "region" {
  default = "us-east-1"
}

variable "cred_path" {
default = "~/.aws/credentials"

}

variable "ami_value" {

 default = "amzn2-ami-hvm*"

}

variable "instance_type" {

default = "t2.micro"
}

variable "env" {

default = "Dev"
}

Save the file.

use the variable in the tf file

# vim aws_infra.tf


provider "aws" {
  region = var.region
  shared_credentials_files = [var.cred_path]
}

data "aws_ami" "myami" {

most_recent      = true
owners           = ["amazon"]
filter {
    name   = "name"
    values = [var.ami_value]
}

}

resource "aws_instance" "myec2" {
  ami           = data.aws_ami.myami.id
  instance_type = var.instance_type

  tags = {
    Name = "instance1"
  }
}


Save the file

# terraform plan


============================================
Count, count index and instance name
===========================================

# vim aws_infra.tf

replace the aws_instance resource block with below code

resource "aws_instance" "myec2" {
  ami           = data.aws_ami.myami.id
  instance_type = var.instance_type
  count = 5
  tags = {
    Name = "${var.env}-${count.index}"
  }
}


Save the file

# terraform plan

=======================================
Dynamic Block:
==========================================

# vim aws_sg.tf

variable "sg_ports"{
type = list(number)
default = [8080,8989,80]
}

resource "aws_security_group" "mysg" {
  name        = "webrules"
  description = "Custom security groups"

dynamic "ingress" {
    for_each = var.sg_ports
    iterator = port
    content{
    from_port        = port.value
    to_port          = port.value
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    
  }

}

}

save the file

# terraform apply --target aws_security_group.mysg

===========================================================

Modules:
===============================================
Modules in terraform are nothing but a collection of configuration files that re written in dedicated directories

A modules encapsulates group of resources, variables, output block that can reused again and again to create different infrastructure in different environments

When working in a team one can create module for various resources and others in the team can source the modules and use them with different variable values

Modules in terraform are reusable terraform code

Knowingly or unknowingly you have been working with the concept of modules form the very beginning
The configuration files that we have written so far which is using variables => that itself is a modules -> call it as root module

Lets say I create new directories(new modules) and in which i create new .tf file and variable file. Then we can call the new directories into the main configuration files-> we call these child modules.

The modules/directories with .tf files created in my VM are called as Local modules

Modules that are available in Terraform Registry or modules that you create and share it to your team on SCM system -> called as Published Modules

A typical module directory will consist of:

> main.tf  => consist of resource blocks
> variables.tf => consist of variables block
> output.tf ⇒ consist of output blocks
> README.md => describing details of modules



Demo: 

# cd

# mkdir modules 

In this directory we will write terraform reusable code

# cd modules

Create the first module -> which is nothing but a directory

# mkdir myec2-module

# cd myec2-module

# vim myec2.tf

data "aws_ami" "myami" {

most_recent = true

owners = ["amazon"]

filter {

 name = "name"
 values = ["amzn2-ami-hvm*"]


}


}


resource "aws_instance" "myec2" {

  ami           = data.aws_ami.myami.id

  instance_type = var.instance_type

  tags = {
    Name = "terraform-instance"
  }
}


Save the file

# vim variables.tf


variable "instance_type" {

default = "t2.micro"

}


Save this file

# pwd

Copy the path of the module

The path to my module is : /root/modules/myec2-module

Create the second module
==========================

# cd ..

# mkdir mysg-module
# cd mysg-module
# vim mysg.tf


resource "aws_security_group" "allow_tls" {
  name        = "sg_rule"

dynamic "ingress" {
    for_each  = var.sg_ports
    iterator = port
    content{
    from_port        = port.value
    to_port          = port.value
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]

  }

}

}


Save the file


# vim variables.tf

variable "sg_ports" {

type = list(number)

default = [8080,8989,8888,8282]

}


Save the file

# pwd

Copy the path of the module

My path of module is : /root/modules/mysg-module

Now 2 modules are ready -> nothing but your reusable code

You call these modules in any configuration file

How do we use modules now:
==============================
Come out of modules directory

# cd

Create a new directory where we will reuse the modules

# mkdir dev

# cd dev

In the main configuration file we will write the provider block and call the modules

In the below file give your module path

# vim main.tf


provider "aws" {
  region     = "us-east-1"
  shared_credentials_files = ["~/.aws/credentials"]
}

module "myec2module"{
 source = "/root/modules/myec2-module"
}

module "mysgmodule" {
source = "/root/modules/mysg-module"

}
Save the file

# terraform init

This command will download the module
The download modules will be the current directory  -> .terraform

# terraform plan




























































