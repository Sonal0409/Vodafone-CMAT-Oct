# sudo su -

Install Terraform:

# wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
# echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
# sudo apt-get update 
# sudo apt-get install terraform -y
# terraform --version

Launch the AWS lab
===========================================
Create a new user in IAM and Create Access key and secret key


Create user and credentials in AWS:
============================

We need create an new user in AWS whose credentials will be provided to terraform -- IAM service on AWS will be used

In AWS 

IAM > Users > click on add user

 > give a username
 > click next >
 select Attach policies directly > select AdministratorAccess below >>

 click on next >

click on create user.

Now lets attach access key and secret key to the user.

Click on user name>>

 click on security credentials

 > Scroll down → Select Access keys> click on create access key
 > select Command Line Interface (CLI)

> scroll down → click on I understand the above recommendation and want to proceed to create an access key. > press next > click on create access key

Configure AWS for accesskey and secret key
=============================================
# apt-get install awscli -y

# aws configure

Give the valid access key

Give the valid secret key

Press enter, no need to give any region and format option

You can check it by below commands

# cd

# ls -al

# cd .aws

# cat credentials



================================================

# mkdir myterraformfiles
# cd myterraformfiles

# vim aws_infra.tf

provider "aws" {
  region = "us-east-1"
  shared_credentials_files = ["~/.aws/credentials"]
}

Save the file

# terraform init

================================
Terraform code is always written in the form of a block

provider block
resource block
data block
variable block
local block
dynamic block
provisioner block
connection block

a block is represented with 
{
    // terraform code
}
every block will have a unique name given by the user



Data Block:
=================
data block in Terraform will not create anything on AWS

Rather, it is like a filter that will search specific data on AWS and fetch the data on the Terraform machine.

We will use this data block in our code to search for desired ami id and pass it on to the resource block


=======================

Data block to filter and get ami id
================================

Add the data block in the aws_infra.tf file as show below.
Do not repeat the provider block.

# vim aws_infra.tf

provider "aws" {
  region = "us-east-1"
  shared_credentials_files = ["~/.aws/credentials"]
}

data "aws_ami" "myami" {

most_recent      = true
owners           = ["amazon"]
filter {
    name   = "name"
    values = ["amzn2-ami-hvm*"]
}

}

Save the file

exeucte the file

# terraform apply

# ls

you will see terraform.tfstate file

# cat terraform.tfstate
you will see the dteials of the ami fetched.

=========================================
Add the resource block that will use ami id form the data block:

 # vim aws_infra.tf

resource "aws_instance" "myec2" {
  ami           = data.aws_ami.myami.id
  instance_type = "t2.micro"

  tags = {
    Name = "instance1"
  }
}

save the file

# terraform apply

give yes for approval

check the instance in AWS

# terraform destroy

===================================================
Variables in terraform:
==============================================

# vim variables.tf

variable "region" {
  default = "us-east-1"
}

variable "cred_path" {
default = "~/.aws/credentials"

}

variable "ami_value" {

 default = "amzn2-ami-hvm*"

}

variable "instance_type" {

default = "t2.micro"
}

variable "env" {

default = "Dev"
}

Save the file.

use the variable in the tf file

# vim aws_infra.tf


provider "aws" {
  region = var.region
  shared_credentials_files = [var.cred_path]
}

data "aws_ami" "myami" {

most_recent      = true
owners           = ["amazon"]
filter {
    name   = "name"
    values = [var.ami_value]
}

}

resource "aws_instance" "myec2" {
  ami           = data.aws_ami.myami.id
  instance_type = var.instance_type

  tags = {
    Name = "instance1"
  }
}


Save the file

# terraform plan


============================================
Count, count index and instance name
===========================================

# vim aws_infra.tf

replace the aws_instance resource block with below code

resource "aws_instance" "myec2" {
  ami           = data.aws_ami.myami.id
  instance_type = var.instance_type
  count = 5
  tags = {
    Name = "${var.env}-${count.index}"
  }
}


Save the file

# terraform plan
























































