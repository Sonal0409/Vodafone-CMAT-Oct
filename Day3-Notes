
# sudo su -
# su - ansiuser

# mkdir roles

# cd roles

# ansible-galaxy init apacherole

# cd apacherole

# vim tasks/main.yml

---
# tasks file for apacherole

  - name: Install {{pkg_name}}  package
    package: name={{pkg_name}} state={{pkg_state}}
  - name: Start the service
    service: name={{pkg_name}} state={{service_state}}
  - name: Update the ports.conf file in apche2 server
    template: src=ports.conf.j2 dest={{conf_path}}
    notify: Restart the service
  - name: Deploy the index.html file
    template: src=index.html.j2 dest={{index_path}}
    notify: Restart the service
  - name: Copy a text file
    copy: src=demoroles dest={{file_path}}


Save the file

# vim templates/ports.conf.j2

# If you just change the port or add more ports here, you will likely also
# have to change the VirtualHost statement in
# /etc/apache2/sites-enabled/000-default.conf

Listen {{apache_port}}

<IfModule ssl_module>
        Listen 443
</IfModule>

<IfModule mod_gnutls.c>
        Listen 443
</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet


Save the file


# vim templates/index.html.j2


<h1> This is my application </h1>
<marquee> Look I deployed my application using Jinja2 </marquee>
The Ipaddress of the host is : {{ ansible_default_ipv4["address"] }}
The Host node name : {{ ansible_nodename }}
The Os family of the host is : {{ ansible_os_family }}
For any issues contact the admin at : {{ admin_email }}

Save this file

# vim files/demoroles

This is a File form ansible Controller

<h1> This is my application </h1>
<marquee> Look I deployed my application using Jinja2 </marquee>
The Ipaddress of the host is : {{ ansible_default_ipv4["address"] }}
The Host node name : {{ ansible_nodename }}
The Os family of the host is : {{ ansible_os_family }}
For any issues contact the admin at : {{ admin_email }}

save the file

# vim vars/main.yml
---
# vars file for apacherole

pkg_name: apache2
pkg_state: present
service_state: started
conf_path: /etc/apache2/ports.conf
index_path: /var/www/html/index.html
file_path: /etc/demoroles
admin_email: ansible@gmail.com
apache_port: 80


save the file

# vim handlers/main.yml
---
# handlers file for apacherole

- name: Restart the service
  service: name={{pkg_name}} state=restarted


save the file

Create the playbook to exeucte the role

Comput of the roles directory

# cd

# vim playbookroles.yml

ansiuser@ip-172-31-15-249:~$ cat playbookroles.yml

- name: Roles in ansible
  hosts: webserver
  become: true
  roles:
   - apacherole


Save and run playbook.

===================================================

Roles Example 2:

Step 1:

# git clone https://github.com/Sonal0409/Ansible-Project.git

Step 2:

# cd Ansible-Project

Run the command to execute the playbook and the roles

# ansible-playbook -i /home/ansiuser/myinventory playbook.yml


==========================================================================

Ansible Dynamic Inventory

# su - ansiuser

Install ansible aws_ec2 plugins
The plugin is part of the amazon.aws collection
We will install the desired collection

# ansible-galaxy collection install amazon.aws

In order to install boto3 and botocore we need python3-pip package

# sudo apt install python3-pip

# pip3 install boto3

# pip show boto3

# pip3 install --upgrade ansible

Update the ansible.cfg file for it to use the aws_ec2 plugin to fetch the inventory

# vim ansible.cfg

[defaults]

inventory = /home/ansiuser/myinventory

enable_plugins = aws_ec2
Save the file




Create the aws_ec2 inventory file

# vim aws_ec2.yml

plugin: amazon.aws.aws_ec2
regions:
 - us-east-1


Save the file

===============================================================================
Launch the AWS lab:


Create user and credentials in AWS:
============================

We need create an new user in AWS whose credentials will be provided to terraform -- IAM service on AWS will be used

In AWS 

IAM > Users > click on add user

 > give a username
 > click next >
 select Attach policies directly > select AdministratorAccess below >>

 click on next >

click on create user.

Now lets attach access key and secret key to the user.

Click on user name>>

 click on security credentials

 > Scroll down → Select Access keys> click on create access key
 > select Command Line Interface (CLI)

> scroll down → click on I understand the above recommendation and want to proceed to create an access key. > press next > click on create access key
















On the Ansible Master Lab:

Create access key and secret key and save it as environment variables:

Run these commands

 # export AWS_ACCESS_KEY_ID=
#export AWS_SECRET_ACCESS_KEY=

Now execute the command to list the inventory:

# ansible-inventory -i /home/ansiuser/aws_ec2.yml --list


Create Ec2 instances on AWS 

On the master node run the inventory command:

# ansible-inventory -i /home/ansiuser/aws_ec2.yml --list




























